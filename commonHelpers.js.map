{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nlet userSelectedDate;\nlet timeInterval;\n\n  const options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      timeInterval = userSelectedDate - new Date();\n      if (timeInterval < 1) {\n        iziToast.error({\n          color: 'red',\n          position: 'topRight',\n          message: `Please choose a date in the future`,\n        });\n      } else {\n        startBtn.disabled = false;\n        inputTime.disabled = true;\n        startBtn.classList.add(`btn-active`);\n      }\n    },\n  };\n  \n  function convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n  const calendar = flatpickr('#datetime-picker', options);\n  const inputTime = document.querySelector('#datetime-picker');\n  const startBtn = document.querySelector('button');\n  const showTime = document.querySelectorAll('.value');\n  \n  console.log(showTime);\n  \n  startBtn.disabled = true;\n  \n  startBtn.addEventListener('click', event => {\n    const repeatTime = setInterval(() => {\n      timeInterval = userSelectedDate - new Date();\n      startBtn.classList.remove(`btn-active`);\n      if (timeInterval < 1) {\n        startBtn.disabled = true;\n        clearInterval(repeatTime);\n        return;\n      }\n      const timer = convertMs(timeInterval);\n      showTime[0].innerText = timer.days.toString().padStart(2, '0');\n      showTime[1].innerText = timer.hours.toString().padStart(2, '0');\n      showTime[2].innerText = timer.minutes.toString().padStart(2, '0');\n      showTime[3].innerText = timer.seconds.toString().padStart(2, '0');\n    }, 1000);\n  });s\n  \n \n  \n"],"names":["userSelectedDate","timeInterval","options","selectedDates","iziToast","startBtn","inputTime","convertMs","ms","days","hours","minutes","seconds","flatpickr","showTime","event","repeatTime","timer"],"mappings":"2GAMA,IAAIA,EACAC,EAEF,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAClCF,EAAeD,EAAmB,IAAI,KAClCC,EAAe,EACjBG,EAAS,MAAM,CACb,MAAO,MACP,SAAU,WACV,QAAS,oCACnB,CAAS,GAEDC,EAAS,SAAW,GACpBC,EAAU,SAAW,GACrBD,EAAS,UAAU,IAAI,YAAY,EAEtC,CACL,EAEE,SAASE,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAEgBC,EAAU,mBAAoBX,CAAO,EACtD,MAAMI,EAAY,SAAS,cAAc,kBAAkB,EACrDD,EAAW,SAAS,cAAc,QAAQ,EAC1CS,EAAW,SAAS,iBAAiB,QAAQ,EAEnD,QAAQ,IAAIA,CAAQ,EAEpBT,EAAS,SAAW,GAEpBA,EAAS,iBAAiB,QAASU,GAAS,CAC1C,MAAMC,EAAa,YAAY,IAAM,CAGnC,GAFAf,EAAeD,EAAmB,IAAI,KACtCK,EAAS,UAAU,OAAO,YAAY,EAClCJ,EAAe,EAAG,CACpBI,EAAS,SAAW,GACpB,cAAcW,CAAU,EACxB,MACD,CACD,MAAMC,EAAQV,EAAUN,CAAY,EACpCa,EAAS,CAAC,EAAE,UAAYG,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC7DH,EAAS,CAAC,EAAE,UAAYG,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9DH,EAAS,CAAC,EAAE,UAAYG,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAChEH,EAAS,CAAC,EAAE,UAAYG,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CACjE,EAAE,GAAI,CACX,CAAG,EAAE"}